<?php

/**
 * Интерфейс реализующий субьект коллекции
 * Должен содержать набор приватных свойств и геттеры/сеттеры для их обработки
 * Метод save - сохраняет субьект
 * Метод delete вызывает метод delete класса коллекции
 */
interface Subject {

    /**
     * Приватное свойство со ссылкой на класс реализующий интерфейс коллекции
     *
     * @var \Collection
     */
    private static $collection;
    
    /**
     * Идентификатор субьекта - всегда должен быть задан
     *
     * @var string
     */
    protected $id;

    /**
     * Прежний идентификатор субъекта коллекции - задается равный null если это новый субьект, иначе принимает значение ID существующего субьекта
     *
     * @var string
     */
    protected $old_id;

    /**
     * Конструктор с идентификатором - инициализирует субьект коллекции
     * 
     * @param string $id Идентификатор элемента коллекции. Если идентификатор не задан, генерирует новый идентификатор, прежний идентификатор равен null. Если идентификатор задан - ищет субьект с указанным идентификатором или возвращает исключение в случае его отсутствия.
     */
    public function __construct(string $id = null);

    /**
     * Метод осуществляет проверку существования приватного свойства и возвращает его значение
     *
     * @param mixed $property Имя свойства
     * @return mixed Значение свойства
     */

    public function __get($property);

    /**
     * Метод осуществляет установку нового значения приватного свойства
     *
     * @param mixed $property Имя свойства
     * @param mixed $value Значение свойства
     */
    public function __set($property, &$value);

    /**
     * Сохраняет субьект в коллекции
     *
     * @return bool Возвращает истину в случае успешного сохранения субъекта
     */
    public function save();

    /**
     * Удаляет субьект коллекции
     *
     * @return bool Возвращает истину в случае успешного удаление субьекта
     */
    public function delete();

}
?>